# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BandStacker
                                 A QGIS plugin
 A plugin to stack bands from selected raster layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-02
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Mirjan Ali Sha
        email                : mirjanalisha@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
# from qgis.PyQt.QtGui import QIcon
# from qgis.PyQt.QtWidgets import QAction, QFileDialog
# from qgis.core import QgsProject, Qgis

# Initialize Qt resources from file resources.py
from .resources import *
from qgis.core import QgsProject
from qgis.utils import iface
from PyQt5.QtWidgets import QAction, QFileDialog, QListWidgetItem
from .band_stacker_dialog import BandStackerDialog
from osgeo import gdal
import numpy as np
import os

class BandStacker:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.dialog = BandStackerDialog()

    def initGui(self):
        self.action = QAction("Band Stacker", self.iface.mainWindow())
        self.action.triggered.connect(self.run)
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu("Band Stacker", self.action)

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dialog, "Select   output file ","", '*.tif')
        if filename:  # Check if a filename is selected
            self.dialog.outputFileName.setText(filename)
        # self.dialog.lineEdit.setText(filename)

    def unload(self):
        self.iface.removeToolBarIcon(self.action)
        self.iface.removePluginMenu("Band Stacker", self.action)

    def run(self):
        self.dialog.browseButton.clicked.connect(self.select_output_file)
        
        self.dialog.outputFileName.clear()
        self.dialog.layerListWidget.clear()
        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            if layer.type() == layer.RasterLayer:
                item = QListWidgetItem(layer.name())
                item.setCheckState(False)
                self.dialog.layerListWidget.addItem(item)
        self.dialog.show()
        self.dialog.stackBandsButton.clicked.connect(self.stack_bands)

    def stack_bands(self):
        selected_layers = []
        for index in range(self.dialog.layerListWidget.count()):
            item = self.dialog.layerListWidget.item(index)
            if item.checkState():
                layer_name = item.text()
                layer = QgsProject.instance().mapLayersByName(layer_name)[0]
                selected_layers.append(layer)

        if len(selected_layers) < 2:
            self.iface.messageBar().pushMessage("Error", "Please select at least two raster layers.", level=3)
            return

        output_file_name = self.dialog.outputFileName.text()
        if not output_file_name:
            self.iface.messageBar().pushMessage("Error", "Please specify an output file name.", level=3)
            return

        bands_arrays = []
        geotransform = None
        projection = None

        for layer in selected_layers:
            path = layer.dataProvider().dataSourceUri()
            ds = gdal.Open(path)
            if ds is None:
                self.iface.messageBar().pushMessage("Error", f"Could not open {path}", level=3)
                return
            band_array = ds.GetRasterBand(1).ReadAsArray()
            bands_arrays.append(band_array)
            if geotransform is None:
                geotransform = ds.GetGeoTransform()
                projection = ds.GetProjection()

        ref_shape = bands_arrays[0].shape
        for band_array in bands_arrays:
            if band_array.shape != ref_shape:
                self.iface.messageBar().pushMessage("Error", "All selected bands must have the same dimensions.", level=3)
                return

        stacked_array = np.stack(bands_arrays, axis=0)

        driver = gdal.GetDriverByName('GTiff')
        out_ds = driver.Create(output_file_name, ref_shape[1], ref_shape[0], len(bands_arrays), gdal.GDT_Float32)
        out_ds.SetGeoTransform(geotransform)
        out_ds.SetProjection(projection)

        for i in range(len(bands_arrays)):
            out_ds.GetRasterBand(i+1).WriteArray(stacked_array[i])

        out_ds = None
        self.iface.messageBar().pushMessage("Success", "Stacking completed successfully!", level=1)


# from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
# from qgis.PyQt.QtGui import QIcon
# from qgis.PyQt.QtWidgets import QAction

# # Initialize Qt resources from file resources.py
# from .resources import *
# # Import the code for the dialog
# from .band_stacker_dialog import BandStackerDialog
# import os.path


# class BandStacker:
#     """QGIS Plugin Implementation."""

#     def __init__(self, iface):
#         """Constructor.

#         :param iface: An interface instance that will be passed to this class
#             which provides the hook by which you can manipulate the QGIS
#             application at run time.
#         :type iface: QgsInterface
#         """
#         # Save reference to the QGIS interface
#         self.iface = iface
#         # initialize plugin directory
#         self.plugin_dir = os.path.dirname(__file__)
#         # initialize locale
#         locale = QSettings().value('locale/userLocale')[0:2]
#         locale_path = os.path.join(
#             self.plugin_dir,
#             'i18n',
#             'BandStacker_{}.qm'.format(locale))

#         if os.path.exists(locale_path):
#             self.translator = QTranslator()
#             self.translator.load(locale_path)
#             QCoreApplication.installTranslator(self.translator)

#         # Declare instance attributes
#         self.actions = []
#         self.menu = self.tr(u'&Band Stacker')

#         # Check if plugin was started the first time in current QGIS session
#         # Must be set in initGui() to survive plugin reloads
#         self.first_start = None

#     # noinspection PyMethodMayBeStatic
#     def tr(self, message):
#         """Get the translation for a string using Qt translation API.

#         We implement this ourselves since we do not inherit QObject.

#         :param message: String for translation.
#         :type message: str, QString

#         :returns: Translated version of message.
#         :rtype: QString
#         """
#         # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
#         return QCoreApplication.translate('BandStacker', message)


#     def add_action(
#         self,
#         icon_path,
#         text,
#         callback,
#         enabled_flag=True,
#         add_to_menu=True,
#         add_to_toolbar=True,
#         status_tip=None,
#         whats_this=None,
#         parent=None):
#         """Add a toolbar icon to the toolbar.

#         :param icon_path: Path to the icon for this action. Can be a resource
#             path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
#         :type icon_path: str

#         :param text: Text that should be shown in menu items for this action.
#         :type text: str

#         :param callback: Function to be called when the action is triggered.
#         :type callback: function

#         :param enabled_flag: A flag indicating if the action should be enabled
#             by default. Defaults to True.
#         :type enabled_flag: bool

#         :param add_to_menu: Flag indicating whether the action should also
#             be added to the menu. Defaults to True.
#         :type add_to_menu: bool

#         :param add_to_toolbar: Flag indicating whether the action should also
#             be added to the toolbar. Defaults to True.
#         :type add_to_toolbar: bool

#         :param status_tip: Optional text to show in a popup when mouse pointer
#             hovers over the action.
#         :type status_tip: str

#         :param parent: Parent widget for the new action. Defaults None.
#         :type parent: QWidget

#         :param whats_this: Optional text to show in the status bar when the
#             mouse pointer hovers over the action.

#         :returns: The action that was created. Note that the action is also
#             added to self.actions list.
#         :rtype: QAction
#         """

#         icon = QIcon(icon_path)
#         action = QAction(icon, text, parent)
#         action.triggered.connect(callback)
#         action.setEnabled(enabled_flag)

#         if status_tip is not None:
#             action.setStatusTip(status_tip)

#         if whats_this is not None:
#             action.setWhatsThis(whats_this)

#         if add_to_toolbar:
#             # Adds plugin icon to Plugins toolbar
#             self.iface.addToolBarIcon(action)

#         if add_to_menu:
#             self.iface.addPluginToRasterMenu(
#                 self.menu,
#                 action)

#         self.actions.append(action)

#         return action

#     def initGui(self):
#         """Create the menu entries and toolbar icons inside the QGIS GUI."""

#         icon_path = ':/plugins/band_stacker/icon.png'
#         self.add_action(
#             icon_path,
#             text=self.tr(u'Band Stack'),
#             callback=self.run,
#             parent=self.iface.mainWindow())

#         # will be set False in run()
#         self.first_start = True


#     def unload(self):
#         """Removes the plugin menu item and icon from QGIS GUI."""
#         for action in self.actions:
#             self.iface.removePluginRasterMenu(
#                 self.tr(u'&Band Stacker'),
#                 action)
#             self.iface.removeToolBarIcon(action)


#     def run(self):
#         """Run method that performs all the real work"""

#         # Create the dialog with elements (after translation) and keep reference
#         # Only create GUI ONCE in callback, so that it will only load when the plugin is started
#         if self.first_start == True:
#             self.first_start = False
#             self.dlg = BandStackerDialog()

#         # show the dialog
#         self.dlg.show()
#         # Run the dialog event loop
#         result = self.dlg.exec_()
#         # See if OK was pressed
#         if result:
#             # Do something useful here - delete the line containing pass and
#             # substitute with your code.
#             pass
